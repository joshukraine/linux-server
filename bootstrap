#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux headless machine (such as a web
# server) with my minimal dotfiles and preferences for bash.
#
# Some of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
################################################################################


################################################################################
# First, some helpful functions borrowed from Laptop. Thank you, thoughtbot. :)
################################################################################

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}


################################################################################
# Next, a little more setup...
################################################################################

set -e # Terminate script if anything exits with a non-zero value
set -u # Prevent unset variables

osname=$(uname)
divider="====> "

# These are the dotfiles that will be symlinked to $HOME/dotfiles
files="bash_profile bashrc git-completion.bash git-prompt.sh gitconfig gitignore_global tmux.conf vimrc"

DOTFILES_DIR=$HOME/dotfiles
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

# Change this if you are using your own fork
DOTFILES_REPO_URL="https://github.com/joshukraine/dotfiles.git"

# Change this value for testing installs of feature branches.
DOTFILES_BRANCH="linux-server"


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  fancy_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up dotfiles on OS X."
  fancy_echo "https://github.com/joshukraine/dotfiles/blob/master/README.md"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  fancy_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi


################################################################################
# 1. Update the system.
################################################################################

fancy_echo "$divider Step 1: Updating system packages ..."

if command -v aptitude >/dev/null; then
  fancy_echo "Using aptitude ..."
else
  fancy_echo "Installing aptitude ..."
  sudo apt-get install -y aptitude
fi

sudo aptitude update

################################################################################
# 2. Install basic tools
################################################################################

fancy_echo "$divider Step 2: Installing basic tools..."

fancy_echo "Installing curl ..."
sudo aptitude install -y curl

fancy_echo "Installing git..."
sudo aptitude install -y git

fancy_echo "Installing python software properties..."
sudo aptitude install -y python-software-properties

fancy_echo "Installing build-essential..."
sudo aptitude install -y build-essential

fancy_echo "Installing vim ..."
sudo aptitude remove vim-tiny -y
sudo aptitude install -y vim-gtk

fancy_echo "Installing htop..."
sudo aptitude install -y htop

fancy_echo "Installing tree..."
sudo aptitude install -y tree

if grep -qiE 'precise|saucy|trusty|utopic|vivid' /etc/os-release; then
  fancy_echo "Adding tmux ppa:pi-rho/dev..."
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo aptitude update
fi

fancy_echo "Installing tmux..." # http://stackoverflow.com/a/25952511
if grep -qiE 'trusty' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~t
elif grep -qiE 'vivid' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~v
else
  sudo aptitude install -y tmux
fi


################################################################################
# 4. Setup dotfiles
################################################################################

fancy_echo "$divider Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  fancy_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf $OLD_DOTFILES_BACKUP
  cp -R $DOTFILES_DIR $OLD_DOTFILES_BACKUP
  rm -rf $DOTFILES_DIR
fi

fancy_echo "Backing up stock bash configs..."
bash_files="bashrc bash_profile profile"
for file in $bash_files; do
  if [ -f $HOME/.$file ]; then
    mv $HOME/.$file "$HOME/.${file}_backup"
  fi
done

fancy_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."
cd $HOME
git clone $DOTFILES_REPO_URL -b $DOTFILES_BRANCH $DOTFILES_DIR

fancy_echo "Creating symlinks..."
for file in $files; do
  if [ -f $HOME/.$file ]; then
    fancy_echo ".$file already present. Backing up..."
    cp $HOME/.$file "$HOME/.${file}_backup"
    rm -f $HOME/.$file
  fi
  fancy_echo "-> Linking $DOTFILES_DIR/$file to $HOME/.$file..."
  ln -nfs "$DOTFILES_DIR/$file" "$HOME/.$file"
done

fancy_echo "Dotfiles setup complete!"


################################################################################
# 6. Install Vundle and vim plugins
################################################################################

fancy_echo "$divider Step 6: Installing Vundle and vim plugins..."
if [ -d $HOME/.vim/bundle ]; then
  rm -rf $HOME/.vim/bundle
fi
git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
cp -R $DOTFILES_DIR/vim/colors $HOME/.vim # So vim won't complain about solarized not being found.
vim +PluginInstall +qall
rm -rf $HOME/.vim/colors

fancy_echo "Done!"


echo ""
echo "**************************************************************"
echo "**** Setup script complete! Please restart your computer. ****"
echo "**************************************************************"
echo ""
