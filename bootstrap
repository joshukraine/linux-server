#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux headless machine (such as a web
# server) with my minimal dotfiles and preferences for bash.
#
# Much of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
################################################################################


################################################################################
# First, some helpful functions borrowed from Laptop. Thank you, thoughtbot. :)
################################################################################

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}


################################################################################
# Next, a little more setup...
################################################################################

set -e # Terminate script if anything exits with a non-zero value
set -u # Prevent unset variables

osname=$(uname)
divider="====> "
# ruby_version="2.2.3"

# These are the dotfiles that will be symlinked to $HOME/dotfiles
files="gitconfig gitignore_global hushlogin tmux.conf vimrc bashrc"

DOTFILES_DIR=$HOME/dotfiles
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

# Change this if you are using your own fork
DOTFILES_REPO_URL="https://github.com/joshukraine/dotfiles.git"

# Change this value for testing installs of feature branches.
DOTFILES_BRANCH="linux-server"


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  fancy_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up dotfiles on OS X."
  fancy_echo "https://github.com/joshukraine/dotfiles/blob/master/README.md"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  fancy_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi


################################################################################
# 1. Update the system.
################################################################################

fancy_echo "$divider Step 1: Updating system packages ..."

if command -v aptitude >/dev/null; then
  fancy_echo "Using aptitude ..."
else
  fancy_echo "Installing aptitude ..."
  sudo apt-get install -y aptitude
fi

sudo aptitude update

################################################################################
# 2. Install basic tools
################################################################################

fancy_echo "$divider Step 2: Installing basic tools..."

fancy_echo "Installing curl ..."
sudo aptitude install -y curl

fancy_echo "Installing git..."
sudo aptitude install -y git

fancy_echo "Installing python software properties..."
sudo aptitude install -y python-software-properties

fancy_echo "Installing build-essential..."
sudo aptitude install -y build-essential

# fancy_echo "Installing libraries for common Ruby/Rails/gem dependencies..."
# sudo aptitude install -y zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev

# fancy_echo "Installing sqlite3..."
# sudo aptitude install -y sqlite3
#
# fancy_echo "Installing Postgres..."
# sudo aptitude install -y postgresql postgresql-server-dev-all
#
# fancy_echo "Installing Redis..."
# sudo aptitude install -y redis-server
#
# fancy_echo "Installing ctags..."
# sudo aptitude install -y exuberant-ctags

fancy_echo "Installing vim ..."
sudo aptitude remove vim-tiny -y
sudo aptitude install -y vim-gtk

fancy_echo "Installing htop..."
sudo aptitude install -y htop

fancy_echo "Installing tree..."
sudo aptitude install -y tree

if grep -qiE 'precise|saucy|trusty|utopic|vivid' /etc/os-release; then
  fancy_echo "Adding tmux ppa:pi-rho/dev..."
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo aptitude update
fi

fancy_echo "Installing tmux..." # http://stackoverflow.com/a/25952511
if grep -qiE 'trusty' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~t
elif grep -qiE 'vivid' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~v
else
  sudo aptitude install -y tmux
fi


# fancy_echo "Installing ImageMagick..."
# sudo aptitude install -y imagemagick
#
# fancy_echo "Installing zsh..."
# sudo aptitude install -y zsh
#
# fancy_echo "Installing node..."
# sudo aptitude install -y nodejs
#
# fancy_echo "Installing xclip..."
# sudo aptitude install -y xclip
#
# if grep -qiE 'precise|saucy|trusty|utopic|vivid|wheezy' /etc/os-release; then
#   fancy_echo "Installing gnome-tweak-tool..."
#   sudo aptitude install -y gnome-tweak-tool
# fi
#
# fancy_echo "Installing Terminator!!! :D ..."
# sudo aptitude install -y terminator
#

################################################################################
# 3. Install oh-my-zsh
################################################################################

# fancy_echo "$divider Step 3: Installing oh-my-zsh..."
# if [ -d "$HOME/.oh-my-zsh" ]; then
#   rm -rf $HOME/.oh-my-zsh
# fi
# git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
#
# fancy_echo "Changing your shell to zsh ..."
# chsh -s $(which zsh)


################################################################################
# 4. Setup dotfiles
################################################################################

fancy_echo "$divider Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  fancy_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf $OLD_DOTFILES_BACKUP
  cp -R $DOTFILES_DIR $OLD_DOTFILES_BACKUP
  rm -rf $DOTFILES_DIR
fi

fancy_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."
cd $HOME
git clone $DOTFILES_REPO_URL -b $DOTFILES_BRANCH $DOTFILES_DIR

fancy_echo "Creating symlinks..."
for file in $files; do
  if [ -f $HOME/.$file ]; then
    fancy_echo ".$file already present. Backing up..."
    cp $HOME/.$file "$HOME/.${file}_backup"
    rm -f $HOME/.$file
  fi
  fancy_echo "-> Linking $DOTFILES_DIR/$file to $HOME/.$file..."
  ln -nfs "$DOTFILES_DIR/$file" "$HOME/.$file"
done

# fancy_echo "-> Linking $DOTFILES_DIR/bin/tat to $HOME/bin/tat..."
# if [ ! -d "$HOME/bin/" ]; then
#   mkdir "$HOME/bin"
# fi
# ln -nfs "$DOTFILES_DIR/bin/tat" "$HOME/bin/tat"
#
# fancy_echo "Configuring Terminator..."
# if [[ -f "$HOME/.config/terminator/config" ]]; then
#   fancy_echo "Backing up existing Terminator profile..."
#   mv $HOME/.config/terminator/config $HOME/.config/terminator/config_backup
#   fancy_echo "Copying new Terminator profile into place..."
#   cp $DOTFILES_DIR/terminator/config $HOME/.config/terminator/config
# else
#   mkdir -p $HOME/.config/terminator
#   fancy_echo "Copying Terminator profile into place..."
#   cp $DOTFILES_DIR/terminator/config $HOME/.config/terminator/config
# fi
fancy_echo "Dotfiles setup complete!"


################################################################################
# 5. Install Powerline-patched fonts
################################################################################

# fancy_echo "$divider Step 5: Installing fixed-width fonts patched for use with Powerline symbols..."
# if [ -d "$HOME/src/fonts" ]; then
#   rm -rf $HOME/src/fonts
# fi
# git clone https://github.com/powerline/fonts.git $HOME/src/fonts
# cd $HOME/src/fonts
# ./install.sh
# cd $HOME
# rm -rf $HOME/src/fonts
#
# fancy_echo "Done!"


################################################################################
# 6. Install Vundle and vim plugins
################################################################################

fancy_echo "$divider Step 6: Installing Vundle and vim plugins..."
if [ -d $HOME/.vim/bundle ]; then
  rm -rf $HOME/.vim/bundle
fi
git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
cp -R $DOTFILES_DIR/vim/colors $HOME/.vim # So vim won't complain about solarized not being found.
vim +PluginInstall +qall
rm -rf $HOME/.vim/colors

fancy_echo "Done!"


################################################################################
# 7. Install rbenv and ruby-build
################################################################################

# fancy_echo "$divider Step 7: Installing rbenv and ruby-build..."
# if [[ ! -d "$HOME/.rbenv" ]]; then
#   fancy_echo "Installing rbenv..."
#   git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
#
#   export PATH="$HOME/.rbenv/bin:$PATH"
#   eval "$(rbenv init - zsh)"
# fi
#
# if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
#   fancy_echo "Installing ruby-build..."
#   git clone https://github.com/sstephenson/ruby-build.git \
#     ~/.rbenv/plugins/ruby-build
# fi

################################################################################
# 8. Install Ruby, Rails, and friends
################################################################################

# fancy_echo "$divider Step 8: Installing Ruby, Rails, and friends..."
#
# fancy_echo "Installing Ruby $ruby_version ..."
# rbenv install -s "$ruby_version"
#
# fancy_echo "Setting $ruby_version as global default Ruby ..."
# rbenv global "$ruby_version"
#
# fancy_echo "Updating to latest Rubygems version ..."
# gem update --system
#
# fancy_echo "Installing Bundler..."
# gem install bundler --no-document --pre
#
# fancy_echo "Installing Rails..."
# gem install rails
#

################################################################################
# 9. Install Google Chrome
################################################################################

# if grep -qiE 'precise|saucy|trusty|utopic|vivid' /etc/os-release; then
#   fancy_echo "$divider Step 9: Installing Google Chrome..."
#
#   wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
#   sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
#   sudo aptitude update
#   sudo aptitude install -y google-chrome-stable
# fi

echo ""
echo "**************************************************************"
echo "**** Setup script complete! Please restart your computer. ****"
echo "**************************************************************"
echo ""
